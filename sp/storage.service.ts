import { Injectable } from "@nestjs/common";
import { Bucket, Storage } from "@google-cloud/storage";
import { GuardianMetadata } from "./models";
import PinataSDK, { PinataClient } from "@pinata/sdk";
import fs from "fs";
import { readFile } from "fs/promises";
import path from "path";
import config from "./configuration/configuration";
import { NetworkService } from "./network.service";

@Injectable()
export class StorageService {
  private readonly pinata: PinataClient;
  private readonly storage: Storage;
  private readonly bucket: Bucket;

  constructor(private readonly networkService: NetworkService) {
    this.pinata = PinataSDK(
      config()["pinata-api-key"],
      config()["pinata-api-secret"]
    );

    this.storage = new Storage({
      projectId: "website-aquaverse",
      keyFilename: path.resolve(__dirname, "..", "gcp-key.json"),
    });

    this.bucket = this.storage.bucket("guardians-assets-original");
  }

  async uploadImageToPinata(name: string, path: string): Promise<string> {
    const readableStreamForFile = fs.createReadStream(path);

    const response = await this.pinata.pinFileToIPFS(readableStreamForFile, {
      pinataMetadata: {
        name,
        autoGenerated: "true", // This key is to apply filters later, boolean are not supported by pinata
      },
      pinataOptions: {
        cidVersion: 1,
        wrapWithDirectory: false,
      },
    });
    return response.IpfsHash;
  }

  async uploadMetadataToPinata(
    name: string,
    guardianMetadata: GuardianMetadata
  ): Promise<string> {
    const response = await this.pinata.pinJSONToIPFS(guardianMetadata, {
      pinataMetadata: {
        name,
        autoGenerated: "true", // This key is to apply filters later, boolean are not supported by pinata
      },
      pinataOptions: {
        cidVersion: 1,
        wrapWithDirectory: true,
      },
    });
    return response.IpfsHash;
  }

  async storeImagesInGcp(guardianId: number): Promise<void> {
    const bucketName =
      process.env.NODE_ENV !== "production" ? "test" : "guardian-v2";

    const promises = [
      this.storeImageInGcp(
        guardianId,
        "result_compressed_350",
        `${bucketName}-350-350`
      ),
      this.storeImageInGcp(
        guardianId,
        "result_compressed_538",
        `${bucketName}-538-538`
      ),
      this.storeImageInGcp(guardianId, "result_compressed", `${bucketName}`),
    ];

    await Promise.all(promises);
  }

  private async storeImageInGcp(
    guardianId: number,
    imageName: string,
    bucketName: string
  ): Promise<void> {
    try {
      const file = await readFile(
        path.resolve(
          this.networkService.getFolderPath(guardianId),
          `${imageName}.png`
        )
      );
      const blob = this.bucket.file(`${bucketName}/${guardianId}.png`);
      const blobStream = blob.createWriteStream({
        resumable: false,
      });
      return new Promise((resolve, reject) => {
        blobStream
          .on("finish", resolve)
          .on("error", reject)
          .end(file);
      });
    } catch (e) {
      console.log(e);
    }
  }
}
